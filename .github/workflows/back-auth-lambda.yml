name: API AUTH SERVICE

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev
    paths:
      - "back/auth/**"

defaults:
  run:
    working-directory: back/auth


env: 
  STACK_NAME: api-auth
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  SERVICE_ROLE: "lambda.amazonaws.com"
  LAMBDA_NAME: "PYTHON AUTH ðŸ¥³"
  LAMBDA_DESCRIPTION: "lambda ...."
  ECR_REPOSITORY: "aws-mentorship"


jobs:
  dev:
    name: Environment Dev
    runs-on: ubuntu-latest 
    environment: dev
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Install dependencies and aws cdk
      working-directory: infra/
      run: |
        sudo npm install -g aws-cdk
        npm install

    - name: Deploy AWS Lambda
      working-directory: infra/
      run: |
        AWS_REGION=${{ env.AWS_REGION }}
        MSG="Hola mundo"
        ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}
        LAMBDA_NAME=${{ env.LAMBDA_NAME }}
        cdk deploy ${{ env.STACK_NAME }}-dev -c context=lambda --require-approval never 

  staging:
    needs: dev
    runs-on: ubuntu-latest
    steps:
      - name: Dockerfile image - Ecr
        uses: actions/checkout@2

  prod:
    needs: staging
    runs-on: ubuntu-latest
    steps:
      - name: Dockerfile image - Ecr
        uses: actions/checkout@2
